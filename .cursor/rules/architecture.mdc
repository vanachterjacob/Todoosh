---
description: 
globs: 
---
---
description: 
globs: 
---
---
description: 
globs: 
---
---
description: 
globs: 
---
{
  "architecture": {
    "files": {
      "index.html": "Main entry point with optimized script loading order",
      "src/app.js": "Main application logic with global class registration",
      "src/js/": {
        "components/": {
          "base/": {
            "Component.js": "Base component with lifecycle methods",
            "FormComponent.js": "Form handling base component"
          },
          "todo/": {
            "TodoContainer.js": "Todo list container component",
            "TodoItem.js": "Individual todo item component",
            "TodoInput.js": "Todo input form component"
          },
          "list/": {
            "ListContainer.js": "List container component",
            "ListItem.js": "Individual list item component",
            "ListInput.js": "List input form component"
          },
          "AppName.js": "Animated app name component",
          "ThemeToggle.js": "Theme switcher component",
          "SyncStatus.js": "Sync status indicator component"
        },
        "models/": {
          "List.js": "List model with validation",
          "Todo.js": "Todo model with subtask support"
        },
        "services/": {
          "BaseService.js": "Abstract base service with error handling",
          "FirebaseService.js": "Firebase integration and sync",
          "StorageService.js": "Local storage management",
          "DragDropService.js": "Drag and drop functionality"
        },
        "utils/": {
          "constants.js": "Centralized constants",
          "validator.js": "Data validation",
          "errorBoundary.js": "Error handling",
          "sanitizer.js": "Content sanitization"
        },
        "ui/": {
          "TodoListRenderer.js": "Todo list UI renderer",
          "ListRenderer.js": "List UI renderer"
        }
      },
      "src/styles/": {
        "base/": {
          "variables.css": "CSS custom properties",
          "reset.css": "Modern CSS reset",
          "typography.css": "Typography rules"
        },
        "components/": {
          "theme-toggle.css": "Theme toggle styling",
          "todo.css": "Todo components styling",
          "list.css": "List components styling",
          "app-name.css": "App name styling"
        },
        "layout/": {
          "grid.css": "Layout grid system",
          "sidebar.css": "Sidebar styling"
        },
        "main.css": "Main stylesheet with imports"
      }
    },
    "optimizations": {
      "script_loading": {
        "order": [
          "Firebase SDK",
          "Firebase config",
          "Utils",
          "Base components",
          "Services",
          "Models",
          "Components",
          "UI renderers",
          "Main app"
        ],
        "strategy": "Global registration pattern"
      },
      "component_structure": {
        "base_components": ["Component", "FormComponent"],
        "inheritance": "All components extend base classes",
        "registration": "Components registered globally on window"
      },
      "styles": {
        "organization": "Modular CSS with clear separation",
        "theming": "CSS custom properties with dark mode support",
        "transitions": "Smooth animations and theme switching"
      },
      "performance": {
        "caching": "Service worker for static assets",
        "storage": "Local-first with Firebase sync",
        "validation": "Schema-based data validation"
      }
    },
    "patterns": {
      "services": {
        "base": {
          "description": "Abstract base service class",
          "features": [
            "Error boundary wrapping",
            "Standardized error handling",
            "Safe property access",
            "Event system",
            "Retry mechanism"
          ]
        }
      },
      "components": {
        "base": {
          "description": "Base component classes",
          "features": [
            "Lifecycle methods",
            "State management",
            "Event delegation",
            "Child component handling",
            "Error boundaries"
          ]
        }
      }
    }
  },
  "important_decisions": {
    "portability": [
      "No build step or bundler required",
      "Works from file:// protocol",
      "Global registration pattern",
      "Minimal external dependencies"
    ],
    "maintainability": [
      "Consistent file organization",
      "Clear component hierarchy",
      "Centralized constants",
      "Modular CSS structure",
      "Comprehensive documentation"
    ],
    "reliability": [
      "Robust error handling",
      "Data validation",
      "Offline support",
      "Sync conflict resolution",
      "Fallback mechanisms"
    ]
  }
}